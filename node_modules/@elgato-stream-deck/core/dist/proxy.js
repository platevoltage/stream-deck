"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamDeckProxy = void 0;
/**
 * A minimal proxy around a StreamDeck instance.
 * This is intended to be used by libraries wrapping this that want to add more methods to the StreamDeck
 */
class StreamDeckProxy {
    device;
    constructor(device) {
        this.device = device;
    }
    get CONTROLS() {
        return this.device.CONTROLS;
    }
    // public get KEY_SPACING_VERTICAL(): number {
    // 	return this.device.KEY_SPACING_VERTICAL
    // }
    // public get KEY_SPACING_HORIZONTAL(): number {
    // 	return this.device.KEY_SPACING_HORIZONTAL
    // }
    get MODEL() {
        return this.device.MODEL;
    }
    get PRODUCT_NAME() {
        return this.device.PRODUCT_NAME;
    }
    get HAS_NFC_READER() {
        return this.device.HAS_NFC_READER;
    }
    calculateFillPanelDimensions(...args) {
        return this.device.calculateFillPanelDimensions(...args);
    }
    async close() {
        return this.device.close();
    }
    async getHidDeviceInfo(...args) {
        return this.device.getHidDeviceInfo(...args);
    }
    async sendPreparedBuffer(...args) {
        return this.device.sendPreparedBuffer(...args);
    }
    async fillKeyColor(...args) {
        return this.device.fillKeyColor(...args);
    }
    async fillKeyBuffer(...args) {
        return this.device.fillKeyBuffer(...args);
    }
    async prepareFillKeyBuffer(...args) {
        return this.device.prepareFillKeyBuffer(...args);
    }
    async fillPanelBuffer(...args) {
        return this.device.fillPanelBuffer(...args);
    }
    async prepareFillPanelBuffer(...args) {
        return this.device.prepareFillPanelBuffer(...args);
    }
    async clearKey(...args) {
        return this.device.clearKey(...args);
    }
    async clearPanel(...args) {
        return this.device.clearPanel(...args);
    }
    async setBrightness(...args) {
        return this.device.setBrightness(...args);
    }
    async resetToLogo(...args) {
        return this.device.resetToLogo(...args);
    }
    async getFirmwareVersion() {
        return this.device.getFirmwareVersion();
    }
    async getAllFirmwareVersions() {
        return this.device.getAllFirmwareVersions();
    }
    async getSerialNumber() {
        return this.device.getSerialNumber();
    }
    async fillLcd(...args) {
        return this.device.fillLcd(...args);
    }
    async setEncoderColor(...args) {
        return this.device.setEncoderColor(...args);
    }
    async setEncoderRingSingleColor(...args) {
        return this.device.setEncoderRingSingleColor(...args);
    }
    async setEncoderRingColors(...args) {
        return this.device.setEncoderRingColors(...args);
    }
    async fillLcdRegion(...args) {
        return this.device.fillLcdRegion(...args);
    }
    async prepareFillLcdRegion(...args) {
        return this.device.prepareFillLcdRegion(...args);
    }
    async clearLcdSegment(...args) {
        return this.device.clearLcdSegment(...args);
    }
    async getChildDeviceInfo(...args) {
        return this.device.getChildDeviceInfo(...args);
    }
    /**
     * EventEmitter
     */
    eventNames() {
        return this.device.eventNames();
    }
    listeners(event) {
        return this.device.listeners(event);
    }
    listenerCount(event) {
        return this.device.listenerCount(event);
    }
    emit(event, ...args) {
        return this.device.emit(event, ...args);
    }
    /**
     * Add a listener for a given event.
     */
    on(event, fn, context) {
        this.device.on(event, fn, context);
        return this;
    }
    addListener(event, fn, context) {
        this.device.addListener(event, fn, context);
        return this;
    }
    /**
     * Add a one-time listener for a given event.
     */
    once(event, fn, context) {
        this.device.once(event, fn, context);
        return this;
    }
    /**
     * Remove the listeners of a given event.
     */
    removeListener(event, fn, context, once) {
        this.device.removeListener(event, fn, context, once);
        return this;
    }
    off(event, fn, context, once) {
        this.device.off(event, fn, context, once);
        return this;
    }
    removeAllListeners(event) {
        this.device.removeAllListeners(event);
        return this;
    }
}
exports.StreamDeckProxy = StreamDeckProxy;
//# sourceMappingURL=proxy.js.map