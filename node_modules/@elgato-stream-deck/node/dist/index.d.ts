import type { OpenStreamDeckOptions, StreamDeck } from '@elgato-stream-deck/core';
import * as HID from 'node-hid';
import { StreamDeckDeviceInfo } from './hid-device.js';
import { JPEGEncodeOptions } from '@elgato-stream-deck/node-lib';
export { VENDOR_ID, DeviceModelId, KeyIndex, StreamDeck, StreamDeckProxy, LcdPosition, Dimension, StreamDeckControlDefinitionBase, StreamDeckButtonControlDefinition, StreamDeckButtonControlDefinitionNoFeedback, StreamDeckButtonControlDefinitionRgbFeedback, StreamDeckButtonControlDefinitionLcdFeedback, StreamDeckEncoderControlDefinition, StreamDeckLcdSegmentControlDefinition, StreamDeckControlDefinition, StreamDeckTcpChildDeviceInfo, OpenStreamDeckOptions, PreparedBuffer, } from '@elgato-stream-deck/core';
export { StreamDeckDeviceInfo, JPEGEncodeOptions };
export interface OpenStreamDeckOptionsNode extends OpenStreamDeckOptions {
    jpegOptions?: JPEGEncodeOptions;
    resetToLogoOnClose?: boolean;
}
/**
 * Scan for and list detected devices
 */
export declare function listStreamDecks(): Promise<StreamDeckDeviceInfo[]>;
/**
 * If the provided device is a streamdeck, get the info about it
 */
export declare function getStreamDeckDeviceInfo(dev: HID.Device): StreamDeckDeviceInfo | null;
/**
 * Get the info of a device if the given path is a streamdeck
 */
export declare function getStreamDeckInfo(path: string): Promise<StreamDeckDeviceInfo | undefined>;
/**
 * Open a streamdeck
 * @param devicePath The path of the device to open.
 * @param userOptions Options to customise the device behvaiour
 */
export declare function openStreamDeck(devicePath: string, userOptions?: OpenStreamDeckOptionsNode): Promise<StreamDeck>;
//# sourceMappingURL=index.d.ts.map